
Sum,min,max:
Min, Max, Sum and Avg using parallel reduction
Code-

#include <iostream>
#include <vector>
#include <omp.h>
#include <climits>

using namespace std;
void min_reduction(vector<int>& arr) {
int min_value = INT_MAX;
#pragma omp parallel for reduction(min: min_value)
for (int i = 0; i < arr.size(); i++) {
if (arr[i] < min_value) {
min_value = arr[i];
}
}
cout << "Minimum value: " << min_value << endl;
}
void max_reduction(vector<int>& arr) {
int max_value = INT_MIN;
#pragma omp parallel for reduction(max: max_value)
for (int i = 0; i < arr.size(); i++) {
if (arr[i] > max_value) {
max_value = arr[i];
}
}
cout << "Maximum value: " << max_value << endl;
}
void sum_reduction(vector<int>& arr) {

int sum = 0;
#pragma omp parallel for reduction(+: sum)
for (int i = 0; i < arr.size(); i++) {
sum += arr[i];
}
cout << "Sum: " << sum << endl;
}
void average_reduction(vector<int>& arr) {
int sum = 0;
#pragma omp parallel for reduction(+: sum)
for (int i = 0; i < arr.size(); i++) {
sum += arr[i];
}
cout << "Average: " << (double)sum / arr.size() << endl;
}
int main() {
vector<int> arr = {5, 2, 9, 1, 7, 6, 8, 3, 4};
min_reduction(arr);
max_reduction(arr);
sum_reduction(arr);
average_reduction(arr);
}

Merge Sort:
#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

void merge(vector<int>& arr, int low, int mid, int high) {
        int i, j, k;
        int left_side = mid - low + 1;
        int right_side = high - mid;
        
        vector<int> left(left_side), right(right_side); // Create temporary arrays for the left and right halves
        
        // Copy data to the temporary arrays
        for (i = 0; i < right_side; i++) {
                left[i] = arr[low + i];
        }
        for (j = 0; j < right_side; j++) {
                right[j] = arr[mid + 1 + j];
        }
        
        i = 0; // Index for the left subarray
        j = 0; // Index for the right subarray
        k = low; // Index for the merged array

        // Merge the temporary arrays back into the original array
        while (i < left_side && j < right_side) {
                if (left[i] <= right[j]) {
                        arr[k++] = left[i++];
                } else {
                        arr[k++] = right[j++];
                }
        }
}

void merge_sort(vector<int>& arr, int low, int high) {
        if (low < high) {
                int mid = low + (high - low) / 2;
#pragma omp task
                merge_sort(arr, low, mid);
#pragma omp task
                merge_sort(arr, mid + 1, high);
                merge(arr, low, mid, high);
        }
}

void parallel_merge_sort(vector<int>& arr) {
#pragma omp parallel
        {
#pragma omp single
                merge_sort(arr, 0, arr.size() - 1);
        }
}

int main() {
        vector<int> arr = {5, 2, 9, 1, 7, 6, 8, 3, 4};
        double start, end;
        // Measure performance of sequential merge sort
        start = omp_get_wtime();
        merge_sort(arr, 0, arr.size() - 1);
        end = omp_get_wtime();
        cout << "Sequential merge sort time: " << end - start <<endl;
        // Measure performance of parallel merge sort
        arr = {5, 2, 9, 1, 7, 6, 8, 3, 4};
        start = omp_get_wtime();
        parallel_merge_sort(arr);
        end = omp_get_wtime();
        cout << "Parallel merge sort time: " << end - start <<endl;
        return 0;
        }

Bubble Sort:
#include<iostream>
#include<omp.h>
#include<vector>

using namespace std;

void bubble_sort(vector<int>& arr){
    bool isSorted = false;
    while(!isSorted){
        isSorted = true;
    
    
#pragma omp parallel for

for(int i=0;i<arr.size()-1,i+=2){
    if(arr[i]>arr[i+1]){
        swap(arr[i],arr[i+1]);
    isSorted=false;
    }
}

#pragma omp parallel for

for(int i=1;i<arr.size()-1,i+=2){
    if(arr[i]>arr[i+1]){
        swap(arr[i],arr[i+1]);
    isSorted=false;
    }
}
    }
}

int main(){
    vector<int> arr = {5,2,3,9,8,6,1,3,5,6};
    double start,end;
    start=omp_get_wtime();
    bubble_sort(arr);
    end=omp_get_wtime();
    cout<<"time: "<<endl;
    return 0;
}

DFS:
#include <iostream>
#include <vector>
#include <stack>
#include <omp.h>

using namespace std;

const int MAXN = 1e5;

vector<int> adj[MAXN + 5]; // adjacency list
bool visited[MAXN + 5];    // mark visited nodes

void dfs(int start_node) {
    stack<int> stack;
    stack.push(start_node);

    while (!stack.empty()) {
        int current_node = stack.top();
        stack.pop();

        if (!visited[current_node]) {
            visited[current_node] = true;
            cout << "Visited node: " << current_node << endl;

            #pragma omp parallel for
            for (int i = 0; i < adj[current_node].size(); i++) {
                int next_node = adj[current_node][i];
                if (!visited[next_node]) {
                    #pragma omp critical
                    stack.push(next_node);
                }
            }
        }
    }
}
int main() {
    cout << "Please enter the number of nodes: ";
    int n; // number of nodes
    cin >> n;

    cout << "Please enter the number of edges: ";
    int m; // number of edges
    cin >> m;

    for (int i = 1; i <= m; i++) {
        cout << "Enter edge " << i << ": ";
        int u, v; // edge between u and v
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    cout << "Enter the starting node of DFS: ";
    int start_node; // start node of DFS
    cin >> start_node;

    dfs(start_node);

    return 0;
}

BFS:
#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

const int MAXN = 1e5;

vector<int> adj[MAXN + 5]; // adjacency list
bool visited[MAXN + 5];    // mark visited nodes

void bfs(int start_node) {
    queue<int> queue;
    queue.push(start_node);

    while (!queue.empty()) {
        int current_node = queue.front();
        queue.pop();

        if (!visited[current_node]) {
            visited[current_node] = true;
            cout << "Visited node: " << current_node << endl;

            #pragma omp parallel for
            for (int i = 0; i < adj[current_node].size(); i++) {
                int next_node = adj[current_node][i];
                if (!visited[next_node]) {
                    #pragma omp critical
                    queue.push(next_node);
                }
            }
        }
    }
}
int main() {
    cout << "Please enter the number of nodes: ";
    int n; // number of nodes
    cin >> n;

    cout << "Please enter the number of edges: ";
    int m; // number of edges
    cin >> m;

    for (int i = 1; i <= m; i++) {
        cout << "Enter edge " << i << ": ";
        int u, v; // edge between u and v
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    cout << "Enter the starting node of BFS: ";
    int start_node; // start node of BFS
    cin >> start_node;

    bfs(start_node);

    return 0;
}











